Viewing the difference between two versions of a file made the 
debugging process much simpler because it allowed me to examine 
only the differences between the old and new file. Since the old 
file worked, I know that the bug in the code must have come from 
some changes that were made. When files are very long this should 
help cut down on debugging time extremely.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

Having easy access to the entire history of a file can make you
a more efficient programmer by reducing time you would have to 
spend trying to restore to a previous version once you encounter bugs.
If you spend less time on this process you will have more time to
spend on actually programming.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions
 automatically saved, like Google Docs does?

 The huge pro associated with manually choosing when to create a commit
 is that you can make the commits make sense logically. You can use 
 them to specify when a certain new feature or change is made, making
 sure that it is just the right amount of change to be specified as a
 different version.

 Why do you think some version control systems, like Git, allow 
 saving multiple files in one commit, while others, like Google 
 Docs, treat each file separately?

 For many features that you add to a program that represent a logical
 basis for a new commit, multiple files will be changed. It therefore 
 makes sense to save these changes together as one commit in order to
 better compare the differences in the program as a whole.

 How can you use the commands git log and git diff to view the history of files?

 You can use the git log command to examine when and what changes were made 
 by looking at the messages. Git diff can help you compare differences in that 
 version with the previous version.

 How might using version control make you more confident to make changes that could break something?

 Even if I try to make a change to the code that breaks something, I can just revert 
 to the last working version and either try to find what broke the code or 
 even just start from scratch. 

 Now that you have your workspace set up, what do you want to try using Git for?

 I want to use git on personal projects as well as completing code for classes
 I take.

  